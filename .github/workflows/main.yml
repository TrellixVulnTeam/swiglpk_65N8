name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}/${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # windows is tested on azure for now
        os: [ubuntu-latest, macos-latest]
        python: [27, 36, 37, 38, 39]
        manylinux_image: [manylinux1, manylinux2010]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: ubuntu-latest
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            platform_id: manylinux_i686
          - os: macos-latest
            platform_id: macosx_x86_64
        exclude:
          # Remove manylinux1 from the osx build matrix since
          # manylinux_image is not used for these platforms
          - os: macos-latest
            manylinux_image: manylinux1

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==1.8.0 requests

      - name: Build and test wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # install swig before build in each python environment
          # each job runs a python environment so this is equivalent to CIBW_BEFORE_ALL
          CIBW_BEFORE_BUILD_LINUX: source {project}/config.sh && pre_build
          CIBW_BEFORE_BUILD_MACOS: source {project}/config.sh && IS_OSX=true pre_build
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          # install before tests
          CIBW_TEST_REQUIRES: nose requests
          CIBW_TEST_COMMAND: cp {project}/test_swiglpk.py . && nosetests -v
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  deploy:
    name: Release to Github and deploy to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Get versions
      id: version
      run: |
        echo "::set-output name=glpk_version::$(python scripts/find_newest_glpk_release.py)"
        echo "::set-output name=swigplk_version::$(python scripts/find_swiglpk_version.py)"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install twine
    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: wheelhouse

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run:
        twine upload --skip-existing --non-interactive ./wheelhouse
    - name: Create GitHub release
      uses: actions/create-release@v1
      if: steps.version.outputs.glpk_version != steps.version.outputs.swigplk_version
      env:
        # This token is set by gh actions
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: "Release of version ${{ steps.version.glpk_version }}"
        draft: false
        prerelease: false

